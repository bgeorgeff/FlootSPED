/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type ContentType = "article" | "informational" | "poem" | "story";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type Numeric = ColumnType<string, number | string, number | string>;

export type ReadingLevel = "fifth_grade" | "first_grade" | "fourth_grade" | "kindergarten" | "second_grade" | "third_grade";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export type UserRole = "admin" | "parent" | "teacher" | "user";

export interface Achievements {
  category: string;
  createdAt: Generated<Timestamp | null>;
  description: string;
  icon: string | null;
  id: Generated<number>;
  isActive: Generated<boolean | null>;
  name: string;
  pointsReward: Generated<number | null>;
  unlockCriteria: Json;
}

export interface Challenges {
  challengeType: string;
  createdAt: Generated<Timestamp | null>;
  description: string;
  endDate: Timestamp;
  id: Generated<number>;
  isActive: Generated<boolean | null>;
  name: string;
  pointsReward: Generated<number | null>;
  startDate: Timestamp;
  targetCriteria: Json;
}

export interface Classrooms {
  createdAt: Generated<Timestamp | null>;
  description: string | null;
  id: Generated<number>;
  isActive: Generated<boolean | null>;
  name: string;
  teacherId: number;
  updatedAt: Generated<Timestamp | null>;
}

export interface ClassroomStudents {
  classroomId: number;
  id: Generated<number>;
  isActive: Generated<boolean | null>;
  joinedAt: Generated<Timestamp | null>;
  studentId: number;
}

export interface ClickedWords {
  clickCount: Generated<number | null>;
  firstClickedAt: Generated<Timestamp | null>;
  id: Generated<number>;
  lastClickedAt: Generated<Timestamp | null>;
  materialId: number;
  materialTitle: string;
  readingLevel: ReadingLevel;
  userId: number | null;
  word: string;
}

export interface LoginAttempts {
  attemptedAt: Generated<Timestamp | null>;
  email: string;
  id: Generated<number>;
  ipAddress: string | null;
  success: Generated<boolean>;
}

export interface ReadingMaterials {
  content: string;
  contentType: ContentType;
  createdAt: Generated<Timestamp | null>;
  estimatedReadingTimeMinutes: number;
  id: Generated<number>;
  readingLevel: ReadingLevel;
  tags: Generated<string[] | null>;
  title: string;
  updatedAt: Generated<Timestamp | null>;
  wordCount: number;
}

export interface ReadingSessions {
  completed: Generated<boolean | null>;
  createdAt: Generated<Timestamp | null>;
  durationSeconds: number | null;
  id: Generated<number>;
  materialId: number;
  sessionEnd: Timestamp | null;
  sessionStart: Generated<Timestamp | null>;
  userId: number;
  wordsClicked: Generated<number | null>;
}

export interface Rewards {
  costPoints: number;
  createdAt: Generated<Timestamp | null>;
  description: string | null;
  icon: string | null;
  id: Generated<number>;
  isActive: Generated<boolean | null>;
  metadata: Generated<Json | null>;
  name: string;
  rewardType: string;
}

export interface Sessions {
  createdAt: Generated<Timestamp | null>;
  expiresAt: Timestamp;
  id: string;
  lastAccessed: Generated<Timestamp | null>;
  userId: number;
}

export interface TeacherStudentRelationships {
  assignedAt: Generated<Timestamp | null>;
  createdBy: number | null;
  id: Generated<number>;
  isActive: Generated<boolean | null>;
  notes: string | null;
  relationshipType: Generated<string>;
  studentId: number;
  teacherId: number;
}

export interface UserAchievements {
  achievementId: number;
  id: Generated<number>;
  isCompleted: Generated<boolean | null>;
  progress: Generated<Json | null>;
  unlockedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface UserChallenges {
  challengeId: number;
  completedAt: Timestamp | null;
  id: Generated<number>;
  pointsEarned: Generated<number | null>;
  progress: Generated<Json | null>;
  userId: number;
}

export interface UserPasswords {
  createdAt: Generated<Timestamp | null>;
  passwordHash: string;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface UserProgress {
  completedAt: Timestamp | null;
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  lastPosition: Generated<number | null>;
  materialId: number;
  progressPercentage: Generated<Numeric | null>;
  readingTimeSeconds: Generated<number | null>;
  startedAt: Generated<Timestamp | null>;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
  wordsClickedCount: Generated<number | null>;
}

export interface UserRewards {
  availablePoints: Generated<number | null>;
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  totalPoints: Generated<number | null>;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface UserRewardUnlocks {
  id: Generated<number>;
  pointsSpent: number;
  rewardId: number;
  unlockedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface Users {
  avatarUrl: string | null;
  createdAt: Generated<Timestamp | null>;
  displayName: string;
  email: string;
  id: Generated<number>;
  role: Generated<UserRole>;
  updatedAt: Generated<Timestamp | null>;
}

export interface DB {
  achievements: Achievements;
  challenges: Challenges;
  classrooms: Classrooms;
  classroomStudents: ClassroomStudents;
  clickedWords: ClickedWords;
  loginAttempts: LoginAttempts;
  readingMaterials: ReadingMaterials;
  readingSessions: ReadingSessions;
  rewards: Rewards;
  sessions: Sessions;
  teacherStudentRelationships: TeacherStudentRelationships;
  userAchievements: UserAchievements;
  userChallenges: UserChallenges;
  userPasswords: UserPasswords;
  userProgress: UserProgress;
  userRewards: UserRewards;
  userRewardUnlocks: UserRewardUnlocks;
  users: Users;
}


// Use these for zod schema enums or other purposes, since the kysely enums are just types
export const ReadingLevelArrayValues: [ReadingLevel, ...ReadingLevel[]] = ["fifth_grade","first_grade","fourth_grade","kindergarten","second_grade","third_grade"];
export const ContentTypeArrayValues: [ContentType, ...ContentType[]] = ["article","informational","poem","story"];
export const UserRoleArrayValues: [UserRole, ...UserRole[]] = ["admin","parent","teacher","user"];
// Note: kysely maps the table/column/enum names from snake_case to camelCase and PascalCase. When running SQL statements, make sure to use snake_case, but TypeScript code should use camelCase or PascalCase.